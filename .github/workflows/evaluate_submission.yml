name: Evaluate Model Submission

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'submissions/**'
      
  workflow_dispatch:
    inputs:
      username:
        description: 'GitHub username of the submission'
        required: true
        type: string

  push:
    branches:
      - main
    paths:
      - 'submissions/**'

jobs:
  # Only runs on PR events to validate submission structure
  validate-submission:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    outputs:
      username: ${{ steps.extract-info.outputs.username }}
      valid: ${{ steps.validate.outputs.valid }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Extract submission info
        id: extract-info
        run: |
          PR_FILES=$(gh pr view ${{ github.event.pull_request.number }} --json files -q '.files[].path')
          USERNAME=$(echo "$PR_FILES" | grep -oP 'submissions/\K[^/]+' | head -1)
          echo "username=$USERNAME" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}
      
      - name: Validate submission structure
        id: validate
        run: |
          USERNAME="${{ steps.extract-info.outputs.username }}"
          # Check if submission directory exists 
          if [ ! -d "submissions/$USERNAME" ]; then
            echo "::error::Invalid submission structure. Directory submissions/$USERNAME not found."
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Check if model file exists
          MODEL_FILE=$(find "submissions/$USERNAME" -type f -name "model.*" | head -1)
          if [ -z "$MODEL_FILE" ]; then
            echo "::error::Model file not found in submissions/$USERNAME/"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Check model file extension
          if [[ ! "$MODEL_FILE" =~ \.(pt|pth|h5|pb|saved_model|tflite)$ ]]; then
            echo "::error::Invalid model format. Supported formats: .pt, .pth, .h5, .pb, .saved_model, .tflite"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Check if metadata.json exists
          if [ ! -f "submissions/$USERNAME/metadata.json" ]; then
            echo "::error::metadata.json not found in submissions/$USERNAME/"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Validate metadata.json format
          jq . "submissions/$USERNAME/metadata.json" > /dev/null 2>&1
          if [ $? -ne 0 ]; then
            echo "::error::Invalid metadata.json format"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # All checks passed
          echo "valid=true" >> $GITHUB_OUTPUT
          
  # Only runs on push (merged PR) or workflow_dispatch events
  evaluate-model:
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      username: ${{ steps.get-username.outputs.username }}
      model_size: ${{ steps.evaluate.outputs.model_size }}
      latency: ${{ steps.evaluate.outputs.latency }}
      accuracy: ${{ steps.evaluate.outputs.accuracy }}
      total_score: ${{ steps.evaluate.outputs.total_score }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Get username
        id: get-username
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            USERNAME="${{ github.event.inputs.username }}"
          else
            # For push events, check if it's a merge from a PR
            PR_NUMBER=$(git log -1 --pretty=%B | grep -oP 'Merge pull request #\K\d+' || echo "")
            
            if [ -n "$PR_NUMBER" ]; then
              echo "This is a merge from PR #$PR_NUMBER, getting details from GitHub API"
              # Get PR details using GitHub API
              PR_FILES=$(gh api repos/${{ github.repository }}/pulls/$PR_NUMBER/files --jq '.[].filename')
              echo "PR Files: $PR_FILES"
              USERNAME=$(echo "$PR_FILES" | grep -oP 'submissions/\K[^/]+' | sort | uniq | head -1)
              echo "Username from PR #$PR_NUMBER: $USERNAME"
            else
              # For direct pushes, get a comprehensive list of changed files
              git fetch --prune --unshallow || true
              CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }})
              echo "Changed files:"
              echo "$CHANGED_FILES"
              
              # Try to extract username from submissions directory pattern
              USERNAME=$(echo "$CHANGED_FILES" | grep -oP 'submissions/\K[^/]+' | sort | uniq | head -1)
              echo "Detected username from changed files: $USERNAME"
              
              # If detection fails, try to get it from the commit message
              if [ -z "$USERNAME" ]; then
                echo "Username detection from files failed, trying commit message..."
                COMMIT_MSG=$(git log -1 --pretty=%B)
                # Look for patterns like "username/user123" or "from username" in commit message
                USERNAME=$(echo "$COMMIT_MSG" | grep -oP '(?:from|by|for)\s+\K\w+' | head -1)
                echo "Username from commit message: $USERNAME"
              fi
            fi
            
            # Default to baseline if all detection methods fail
            if [ -z "$USERNAME" ]; then
              echo "WARNING: Could not detect username, using baseline"
              USERNAME="baseline"
            fi
          fi
          echo "Final username: $USERNAME"
          echo "username=$USERNAME" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install torch torchvision tensorflow kaggle numpy pandas matplotlib
          
      - name: Download validation dataset
        run: |
          # Setup authentication - Method 1 (using just the credentials file)
          mkdir -p ~/.kaggle
          echo "{\"username\":\"${{ secrets.KAGGLE_USERNAME }}\",\"key\":\"${{ secrets.KAGGLE_KEY }}\"}" > ~/.kaggle/kaggle.json
          chmod 600 ~/.kaggle/kaggle.json
          
          # Verify credentials file
          if [ ! -s ~/.kaggle/kaggle.json ]; then
            echo "::error::Kaggle credentials file is empty or not created"
            exit 1
          fi
          
          # Test API access before download
          echo "Testing Kaggle API access..."
          kaggle datasets list -s ${{ secrets.KAGGLE_DATASET }} || { echo "::error::Failed to access Kaggle API"; exit 1; }
          
          # Download dataset with error handling
          echo "Downloading dataset..."
          kaggle datasets download -d ${{ secrets.KAGGLE_DATASET }} -p ./data --unzip || { echo "::error::Failed to download dataset"; exit 1; }
          
          # Check if files were actually downloaded
          if [ ! "$(ls -A ./data)" ]; then
            echo "::error::Dataset directory is empty after download"
            exit 1
          fi
          
          echo "Dataset download completed successfully"
          
      - name: Evaluate model
        id: evaluate
        run: |
          USERNAME="${{ steps.get-username.outputs.username }}"
          python scripts/evaluate.py \
            --submission_dir "submissions/$USERNAME" \
            --data_dir "./data" \
            --baseline_size 44.7 \
            --baseline_latency 30 \
            --baseline_accuracy 40.00 \
            --output_file "evaluation_result.json"
          
          # Extract evaluation results
          MODEL_SIZE=$(jq -r '.model_size' evaluation_result.json)
          LATENCY=$(jq -r '.latency' evaluation_result.json)
          ACCURACY=$(jq -r '.accuracy' evaluation_result.json)
          TOTAL_SCORE=$(jq -r '.total_score' evaluation_result.json)
          
          # Set outputs
          echo "model_size=$MODEL_SIZE" >> $GITHUB_OUTPUT
          echo "latency=$LATENCY" >> $GITHUB_OUTPUT
          echo "accuracy=$ACCURACY" >> $GITHUB_OUTPUT
          echo "total_score=$TOTAL_SCORE" >> $GITHUB_OUTPUT
          
  # Only runs on push (merged PR) or workflow_dispatch events
  update-leaderboard:
    needs: evaluate-model
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas tabulate
          
      - name: Update leaderboard
        run: |
          USERNAME="${{ needs.evaluate-model.outputs.username }}"
          MODEL_SIZE="${{ needs.evaluate-model.outputs.model_size }}"
          LATENCY="${{ needs.evaluate-model.outputs.latency }}"
          ACCURACY="${{ needs.evaluate-model.outputs.accuracy }}"
          TOTAL_SCORE="${{ needs.evaluate-model.outputs.total_score }}"
          SUBMISSION_DATE=$(date -u "+%Y-%m-%d %H:%M:%S UTC")
          
          python scripts/update_leaderboard.py \
            --username "$USERNAME" \
            --model_size "$MODEL_SIZE" \
            --latency "$LATENCY" \
            --accuracy "$ACCURACY" \
            --total_score "$TOTAL_SCORE" \
            --submission_date "$SUBMISSION_DATE" \
            --leaderboard_file "LEADERBOARD.md"
            
      - name: Commit and push leaderboard update
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add LEADERBOARD.md
          git commit -m "Update leaderboard with submission from ${{ needs.evaluate-model.outputs.username }}"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          
  # Clean up model files after evaluation (only on push events)
  cleanup-model:
    needs: [evaluate-model, update-leaderboard]
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Delete model files
        run: |
          USERNAME="${{ needs.evaluate-model.outputs.username }}"
          if [ -d "submissions/$USERNAME" ] && [ "$USERNAME" != "baseline" ]; then
            MODEL_FILES=$(find "submissions/$USERNAME" -type f -name "model.*")
            if [ -n "$MODEL_FILES" ]; then
              for MODEL_FILE in $MODEL_FILES; do
                echo "Deleting model file: $MODEL_FILE"
                rm -f "$MODEL_FILE"
              done
              
              # Create a placeholder file to indicate model was deleted after evaluation
              echo "Model was evaluated and removed on $(date)" > "submissions/$USERNAME/model.evaluated"
              
              # Commit and push changes with proper git setup
              git config --local user.email "action@github.com"
              git config --local user.name "GitHub Action"
              
              # Pull latest changes to avoid conflicts
              git pull --rebase origin main
              
              # Add, commit and push with retry logic
              git add "submissions/$USERNAME"
              git commit -m "Clean up model files for $USERNAME after evaluation"
              
              # Try to push up to 3 times with pull before each retry
              MAX_RETRIES=3
              RETRY=0
              while [ $RETRY -lt $MAX_RETRIES ]; do
                if git push; then
                  echo "Successfully pushed changes"
                  break
                else
                  RETRY=$((RETRY+1))
                  echo "Push failed, retrying ($RETRY/$MAX_RETRIES)..."
                  if [ $RETRY -lt $MAX_RETRIES ]; then
                    git pull --rebase origin main
                    sleep 3
                  fi
                fi
              done
              
              if [ $RETRY -eq $MAX_RETRIES ]; then
                echo "Failed to push after $MAX_RETRIES attempts"
                exit 1
              fi
            fi
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }} 